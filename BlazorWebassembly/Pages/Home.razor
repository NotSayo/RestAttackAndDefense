@page "/"
@using BlazorWebassembly.Services
@using Classes.Enums
@using Classes.Statistics
@using Microsoft.AspNetCore.SignalR.Client
@attribute [StreamRendering]
@inject AttackManagerService AttackManager
@inject AttackLauncher AttackLauncher
@implements IAsyncDisposable

@inject ILogger<Home> logger



@if (DefenceLogs is not null)
{
    @foreach(var log in DefenceLogs)
    {
        <span>@log.AttackId</span>
        <span>@log.AttackedByName</span>
        <span>@log.AttackedByIp</span>
        <span>@log.Result</span>
        <span>@log.AttackValue</span>
        <span>@log.DefenceValue</span>
        <br/>
    }
}

@if (AttackManager.OtherClients.Count > 0)
{
    @foreach(var client in AttackManager.OtherClients)
    {
        <span>@client.IpAddress</span>
        <span>@client.Attack</span>
        <span>@client.Defense</span>
        <span>@client.State</span>
        <br/>
    }
}
else
{
    <div>No clients</div>
}

@if (AttackManager.Statistics is not null)
{
    <span>@AttackManager.Statistics.Points</span>
    <span>@AttackManager.Statistics.Attack</span>
    <span>@AttackManager.Statistics.Defense</span>
    <span>@AttackManager.Statistics.State.ToString()</span>
}

@if (AttackManager.TargetClasification is not null)
{
    @foreach(var target in AttackManager.TargetClasification)
    {
        <span>@target.Key.IpAddress @target.Value</span>
        <br/>
    }
}

<button @onclick="async () => await SendAttack()">SendAttack</button>




@code {
    private HubConnection? _connection { get; set; }
    public List<DefenceLog> DefenceLogs { get; set; } = new List<DefenceLog>();


    public async Task SendAttack()
    {
        await _connection!.SendAsync("LogAttack", new AttackLog
        {
            AttackId = 1,
            AttackedIp = "",
            AttackValue = 1,
            Result = AttackResult.Defended,

        });
    }

    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl("http://localhost:1337/clientHub")
            .Build();
        MapSignalrEvents();
        await _connection!.StartAsync();
        await _connection!.SendAsync("GetDefenceLogs");
        await _connection!.SendAsync("GetStatistics");
        await _connection.SendAsync("ReceiveEnemyClients");

        var t = () => AttackLauncher.TargetSelector(AttackManager.StoppingToken.Token);
        _ = t.Invoke();

        AttackManager.AttackLogAdded += async (e, log) => { await _connection.SendAsync("LogAttack", log); };
    }



    private void MapSignalrEvents()
    {
        _connection.On<List<DefenceLog>>("ReceiveDefenceLogs", (logs) =>
        {
            logger.LogInformation($"ReceiveDefenceLogs {logs.Count} {logs.First().AttackId.ToString()}");
            DefenceLogs = logs;
            InvokeAsync(StateHasChanged);
        });
        _connection.On<DefenceLog>("UpdateDefenceLog", (log) =>
        {
            logger.LogInformation("UpdateDefenceLog");
            DefenceLogs.Add(log);
            InvokeAsync(StateHasChanged);
        });
        _connection.On<List<EnemyClient>>("UpdateEnemyClients", (clients) =>
        {
            AttackManager.UpdateEnemyClients(clients);
            InvokeAsync(StateHasChanged);
        });

        _connection.On<ServerStatistics>("ReceiveStatistics", (stats) =>
        {
            AttackManager.UpdateStatistics(stats);
            InvokeAsync(StateHasChanged);
        });
    }


    public async ValueTask DisposeAsync()
    {
        if (_connection != null) await _connection.DisposeAsync();
    }

}
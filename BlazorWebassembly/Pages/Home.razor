@page "/"
@using Classes.Enums
@using Classes.Statistics
@using Microsoft.AspNetCore.SignalR.Client
@attribute [StreamRendering]
@implements IAsyncDisposable

@if (Statistics is not null)
{
    <div class="container-fluid d-flex justify-content-center pt-5 @(Statistics.State == ServerState.running ? "bg-success" : Statistics.State == ServerState.disabled ? "bg-danger" : "bg-secondary")" style="min-height: 100vh; height: 100%; min-width: 100vw; width: 99%; overflow-x: unset">
        <div class="row justify-content-start" style="width: 90%">
            @if (AttackLogs is not null)
            {
                <div class="col-4">
                    @foreach(var log in AttackLogs)
                    {
                        <div class="col-12">
                            <h4>Attack Log: @log.AttackId</h4>
                            <div>Ip: @log.AttackedIp</div>
                            <div>Attack: @Math.Round((decimal) log.AttackValue, 2)</div>
                            <div>Result: @log.Result.ToString()</div>
                        </div>
                    }
                </div>
            }

            <div class="col-4 d-flex flex-column">
                <h1 class="justify-content-center align-content-center align-self-center fs-1">@Statistics.State.ToString()</h1>
                <div class="fs-3 justify-content-center">Points: @Statistics.Points</div>
                <div class="fs-3 justify-content-center">Attack: @Statistics.Attack</div>
                <div class="fs-3 justify-content-center">Defense: @Statistics.Defense</div>
                @if (AttackStrategy is not null)
                {
                    <div class="fs-4">Current AttackStrategy: @AttackStrategy</div>
                }
                <br/>
                <div class="fs-4">Change Attack Strategy:</div>
                @foreach(var type in Enum.GetValues<AttackStrategy>())
                {
                    <div class="col-12">
                        <button class="mt-4 col-6" @onclick="async () => await SendAttackStrategy(type)">@type.ToString()</button>
                    </div>
                }


                @if (Statistics.State == ServerState.disabled && DefenseLogs is not null)
                {
                    <div class="fs-2 pt-5">Hacked by: @DefenseLogs!.Last().AttackedByName</div>
                }
            </div>

            @if (DefenseLogs is not null)
            {
                <div class="col-4">
                    @foreach(var log in DefenseLogs)
                    {
                        <div class="col-12">
                            <h4>Defense Log: @log.AttackId</h4>
                            <div>Ip: @log.AttackedByIp</div>
                            <div>Name: @log.AttackedByName</div>
                            <div>Attack: @Math.Round((decimal) log.AttackValue, 2)</div>
                            <div>Defense: @Math.Round((decimal) log.DefenseValue, 2)</div>
                            <div>Result: @log.Result.ToString()</div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}





@code {
    private ServerStatistics? Statistics { get; set; }
    private HubConnection? _connection { get; set; }
    private List<DefenseLog>? DefenseLogs { get; set; }
    private List<AttackLog>? AttackLogs { get; set; }
    private AttackStrategy? AttackStrategy { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl("http://localhost:1337/clientHub")
            .WithAutomaticReconnect()
            .Build();
        MapSignalrEvents();
        try
        {
            await _connection.StartAsync();
        } catch (HttpRequestException)
        {
        }

        _connection.Reconnected += async (e) =>
        {
            await ReceiveData();
        };
        await ReceiveData();


    }

    private async Task SendAttackStrategy(AttackStrategy strategy)
    {
        await _connection!.SendAsync("UpdateAttackStrategy", strategy);
    }

    private async Task ReceiveData()
    {
        await _connection!.InvokeAsync("GetStatistics");
        await _connection!.InvokeAsync("GetAttackLogs");
        await _connection!.InvokeAsync("GetDefenseLogs");
        await _connection!.InvokeAsync("GetStrategy");
    }

    private void MapSignalrEvents()
    {
        _connection!.On<ServerStatistics>("ReceiveStatistics", (stats) =>
        {
            Statistics = stats;
            InvokeAsync(StateHasChanged);
        });
        _connection!.On<List<AttackLog>>("ReceiveAttackLogs", (logs) =>
        {
            AttackLogs = logs;
            InvokeAsync(StateHasChanged);
        });

        _connection!.On<List<DefenseLog>>("ReceiveDefenseLogs", (logs) =>
        {
            DefenseLogs = logs;
            InvokeAsync(StateHasChanged);
        });

        _connection!.On<AttackStrategy>("ReceiveStrategy", (strategy) =>
        {
            AttackStrategy = strategy;
            InvokeAsync(StateHasChanged);
        });
    }


    public async ValueTask DisposeAsync()
    {
        if (_connection != null) await _connection.DisposeAsync();
    }

}
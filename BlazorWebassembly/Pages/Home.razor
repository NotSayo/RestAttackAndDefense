@page "/"
@using Classes.Statistics
@using Microsoft.AspNetCore.SignalR.Client
@attribute [StreamRendering]
@implements IAsyncDisposable

@if (Statistics is not null)
{
    <div>@Statistics.State</div>
    <div>@Statistics.Points</div>
    <div>@Statistics.Attack</div>
    <div>@Statistics.Defense</div>
}

@if (DefenseLogs is not null)
{
    @foreach(var log in DefenseLogs)
    {
        <span>@log.AttackId</span>
        <span>@log.AttackedByName</span>
        <span>@log.AttackedByIp</span>
        <span>@log.Result</span>
        <span>@log.AttackValue</span>
        <span>@log.DefenseValue</span>
        <br/>
    }
}

@if (AttackLogs is not null)
{
    @foreach(var log in AttackLogs)
    {
        <span>@log.AttackId</span>
        <span>@log.AttackedIp</span>
        <span>@log.AttackValue</span>
        <span>@log.Result</span>
        <br/>
    }
}




@code {
    private ServerStatistics? Statistics { get; set; }
    private HubConnection? _connection { get; set; }
    private List<DefenseLog>? DefenseLogs { get; set; }
    private List<AttackLog>? AttackLogs { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl("http://localhost:1337/clientHub")
            .WithAutomaticReconnect()
            .Build();
        MapSignalrEvents();
        try
        {
            await _connection.StartAsync();
        } catch (HttpRequestException)
        {
        }

        _connection.Reconnected += async (e) =>
        {
            await ReceiveData();
        };
        await ReceiveData();


    }

    private async Task ReceiveData()
    {
        await _connection!.InvokeAsync("GetStatistics");
        await _connection!.InvokeAsync("GetAttackLogs");
        await _connection!.InvokeAsync("GetDefenseLogs");
    }

    private void MapSignalrEvents()
    {
        _connection!.On<ServerStatistics>("ReceiveStatistics", (stats) =>
        {
            Statistics = stats;
            InvokeAsync(StateHasChanged);
        });
        _connection!.On<List<AttackLog>>("ReceiveAttackLogs", (logs) =>
        {
            AttackLogs = logs;
            InvokeAsync(StateHasChanged);
        });

        _connection!.On<List<DefenseLog>>("ReceiveDefenseLogs", (logs) =>
        {
            DefenseLogs = logs;
            InvokeAsync(StateHasChanged);
        });
    }


    public async ValueTask DisposeAsync()
    {
        if (_connection != null) await _connection.DisposeAsync();
    }

}